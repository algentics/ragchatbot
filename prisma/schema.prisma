// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  name          String
  email         String        @unique
  password      String
  role          String        @default("user")
  subscription  String        @default("free")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  tokenUsage    TokenUsage?
  cases         Case[]
  threads       Thread[]
  messages      Message[]
}

model TokenUsage {
  id            String    @id @default(cuid())
  daily         Int       @default(0)
  monthly       Int       @default(0)
  dailyLimit    Int       @default(1000)
  monthlyLimit  Int       @default(10000)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String    @unique
  updatedAt     DateTime  @updatedAt
}

model Case {
  id            String    @id @default(cuid())
  name          String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  threads       Thread[]
}

model Thread {
  id            String    @id @default(cuid())
  name          String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  case          Case      @relation(fields: [caseId], references: [id], onDelete: Cascade)
  caseId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  messages      Message[]
}

model Message {
  id            String    @id @default(cuid())
  content       String
  role          String
  createdAt     DateTime  @default(now())
  thread        Thread    @relation(fields: [threadId], references: [id], onDelete: Cascade)
  threadId      String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  citations     Citation[]
}

model Citation {
  id            String    @id @default(cuid())
  text          String
  documentId    String
  documentTitle String
  documentSource String
  message       Message   @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId     String
}

model Document {
  id            String    @id @default(cuid())
  title         String
  content       String
  source        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  chunks        Chunk[]
}

model Chunk {
  id            String    @id @default(cuid())
  content       String
  embedding     Float[]
  document      Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId    String
}

model LLMProvider {
  id            String    @id @default(cuid())
  name          String    @unique
  apiKey        String
  isActive      Boolean   @default(false)
  models        LLMModel[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model LLMModel {
  id            String    @id @default(cuid())
  name          String
  isDefault     Boolean   @default(false)
  provider      LLMProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId    String

  @@unique([providerId, name])
}

